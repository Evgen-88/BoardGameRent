openapi: 3.0.1
info:
  title: BoardGameRent
  version: 1.0.0
servers:
- url: http://localhost:8080

paths:
  /users:
    get:
      tags:
      - user-controller
      operationId: findAll
      parameters:
      - name: pageable
        in: query
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageUserBaseDTO'
        "404":
          description: NOT_FOUND

    put:
      tags:
      - user-controller
      operationId: update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserUpdateDTO'
        "404":
          description: NOT_FOUND
        "304":
          description: NOT_MODIFIED

    post:
      tags:
      - user-controller
      operationId: add
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSaveDTO'
        required: true
      responses:
        "201":
          description: CREATED
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
        "404":
          description: NOT_FOUND
        "406":
          description: FORBIDDEN

  /users/{id}/roles:
    get:
      tags:
      - user-controller
      operationId: findRolesByUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleDTO'
        "404":
          description: NOT_FOUND
        "401":
          description: UNAUTORIZED

    put:
      tags:
      - user-controller
      operationId: addRoleToUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: roleId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
        "404":
          description: NOT_FOUND
        "406":
          description: FORBIDDEN
        "401":
          description: UNAUTORIZED

    delete:
      tags:
      - user-controller
      operationId: deleteRoleFromUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: roleId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
        "404":
          description: NOT_FOUND
        "406":
          description: FORBIDDEN
        "401":
          description: UNAUTORIZED

  /users/{id}:
    get:
      tags:
      - user-controller
      operationId: findById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
        "404":
          description: NOT_FOUND
        "401":
          description: UNAUTORIZED

    delete:
      tags:
      - user-controller
      operationId: delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
        "404":
          description: NOT_FOUND
        "406":
          description: FORBIDDEN
        "401":
          description: UNAUTORIZED

  /users/{id}/orders:
    get:
      tags:
      - user-controller
      operationId: findOrdersByUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderListDTO'
        "404":
          description: NOT_FOUND
        "401":
          description: UNAUTORIZED

  /rents:
    put:
      tags:
      - rent-controller
      operationId: update_1
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RentSaveDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RentDTO'
        "404":
          description: NOT_FOUND
        "304":
          description: NOT_MODIFIED

    post:
      tags:
      - rent-controller
      operationId: add_1
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RentSaveDTO'
        required: true
      responses:
        "201":
          description: CREATED
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RentDTO'
        "404":
          description: NOT_FOUND
        "406":
          description: FORBIDDEN
        "401":
          description: UNAUTORIZED

  /rents/{id}:
    get:
      tags:
      - rent-controller
      operationId: findById_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RentDTO'
        "404":
          description: NOT_FOUND
        "401":
          description: UNAUTORIZED

    delete:
      tags:
      - rent-controller
      operationId: delete_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
        "404":
          description: NOT_FOUND
        "406":
          description: FORBIDDEN
        "401":
          description: UNAUTORIZED

  /purchases:
    put:
      tags:
      - purchase-controller
      operationId: update_2
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseSaveDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PurchaseDTO'
        "404":
          description: NOT_FOUND
        "304":
          description: NOT_MODIFIED
        "401":
          description: UNAUTORIZED

    post:
      tags:
      - purchase-controller
      operationId: add_2
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseSaveDTO'
        required: true
      responses:
        "201":
          description: CREATED
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PurchaseDTO'
        "404":
          description: NOT_FOUND
        "406":
          description: FORBIDDEN
        "401":
          description: UNAUTORIZED

  /purchases/{id}:
    get:
      tags:
      - purchase-controller
      operationId: findById_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PurchaseDTO'
        "404":
          description: NOT_FOUND
        "401":
          description: UNAUTORIZED

    delete:
      tags:
      - purchase-controller
      operationId: delete_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
        "404":
          description: NOT_FOUND
        "406":
          description: FORBIDDEN
        "401":
          description: UNAUTORIZED

  /orders:
    get:
      tags:
      - order-controller
      operationId: findAll_2
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderListDTO'
        "404":
          description: NOT_FOUND
        "401":
          description: UNAUTORIZED

    put:
      tags:
      - order-controller
      operationId: update_3
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderSaveDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrderSaveDTO'
        "404":
          description: NOT_FOUND
        "304":
          description: NOT_MODIFIED
        "401":
          description: UNAUTORIZED

    post:
      tags:
      - order-controller
      operationId: add_3
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderSaveDTO'
        required: true
      responses:
        "201":
          description: CREATED
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrderSaveDTO'
        "404":
          description: NOT_FOUND
        "406":
          description: FORBIDDEN
        "401":
          description: UNAUTORIZED

  /orders/{id}:
    get:
      tags:
      - order-controller
      operationId: findById_3
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrderDTO'
        "404":
          description: NOT_FOUND
        "401":
          description: UNAUTORIZED

    delete:
      tags:
      - order-controller
      operationId: delete_3
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
        "404":
          description: NOT_FOUND
        "406":
          description: FORBIDDEN
        "401":
          description: UNAUTORIZED

  /orders/{id}/rents:
    get:
      tags:
      - order-controller
      operationId: findRentsByOrder
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RentDTO'
        "404":
          description: NOT_FOUND
        "401":
          description: UNAUTORIZED

  /orders/{id}/purchases:
    get:
      tags:
      - order-controller
      operationId: findPurchasesByOrder
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PurchaseDTO'
        "404":
          description: NOT_FOUND
        "401":
          description: UNAUTORIZED

  /boardgames:
    get:
      tags:
      - board-game-controller
      operationId: findAll_3
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BoardGameDTO'
        "404":
          description: NOT_FOUND

    put:
      tags:
      - board-game-controller
      operationId: update_4
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardGameDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BoardGameDTO'
        "404":
          description: NOT_FOUND
        "304":
          description: NOT_MODIFIED
        "401":
          description: UNAUTORIZED

    post:
      tags:
      - board-game-controller
      operationId: add_4
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardGameDTO'
        required: true
      responses:
        "201":
          description: CREATED
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BoardGameDTO'
        "404":
          description: NOT_FOUND
        "406":
          description: FORBIDDEN
        "401":
          description: UNAUTORIZED

  /boardgames/{id}:
    get:
      tags:
      - board-game-controller
      operationId: findById_4
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BoardGameDTO'
        "404":
          description: NOT_FOUND

    delete:
      tags:
      - board-game-controller
      operationId: delete_4
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
        "404":
          description: NOT_FOUND
        "406":
          description: FORBIDDEN
        "401":
          description: UNAUTORIZED

  /accessories:
    get:
      tags:
      - accessory-controller
      operationId: findAll_4
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccessoryDTO'
        "404":
          description: NOT_FOUND

    put:
      tags:
      - accessory-controller
      operationId: update_5
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessoryDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessoryDTO'
        "404":
          description: NOT_FOUND
        "304":
          description: NOT_MODIFIED
        "401":
          description: UNAUTORIZED

    post:
      tags:
      - accessory-controller
      operationId: add_5
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessoryDTO'
        required: true
      responses:
        "201":
          description: CREATED
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessoryDTO'
        "404":
          description: NOT_FOUND
        "406":
          description: FORBIDDEN
        "401":
          description: UNAUTORIZED

  /accessories/{id}:
    get:
      tags:
      - accessory-controller
      operationId: findById_5
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessoryDTO'
        "404":
          description: NOT_FOUND

    delete:
      tags:
      - accessory-controller
      operationId: delete_5
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: token
          example: token
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
        "404":
          description: NOT_FOUND
        "406":
          description: FORBIDDEN
        "401":
          description: UNAUTORIZED

  /authentication/logout:
    post:
      tags:
      - authentication-controller
      operationId: logout
      responses:
        "200":
          description: OK

  /authentication/login:
    post:
      tags:
      - authentication-controller
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  login:
                    type: string
                    example: kir
                  token:
                    type: string
                    example: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIzLGtpciIsImlzcyI6Iml0cmV4IiwiaWF0IjoxNjM4NzA5NzI5LCJleHAiOjE2Mzg3MTY5Mjl9.wgfn0P9V_clU2Bzffx4uVAP1Ut4eCAkx2bAIZbI0LBhQJWEfjLENSlzKCrenavFQWAcORShUnLc0MB6Tv9XcBw
        "406":
          description: FORBIDDEN
  /roles:
    get:
      tags:
      - role-controller
      operationId: findAll_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleDTO'
components:
  schemas:
    UserUpdateDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
        password:
          type: string
        name:
          type: string
        phone:
          type: integer
          format: int32
        email:
          type: string
    RentSaveDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        boardGameId:
          type: integer
          format: int64
        orderId:
          type: integer
          format: int64
        rentFrom:
          type: string
          format: date
        rentTo:
          type: string
          format: date
        price:
          type: integer
          format: int32
    RentDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        rentFrom:
          type: string
          format: date
        rentTo:
          type: string
          format: date
        price:
          type: integer
          format: int32
        boardGameId:
          type: integer
          format: int64
        boardGameName:
          type: string
    PurchaseSaveDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        accessoryId:
          type: integer
          format: int64
        orderId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        price:
          type: integer
          format: int32
    PurchaseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        price:
          type: integer
          format: int32
        accessoryId:
          type: integer
          format: int64
        accessoryName:
          type: string
    OrderSaveDTO:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        totalPrice:
          type: integer
          format: int32
        date:
          type: string
          format: date
        status:
          type: string
          enum:
          - booked
          - rejected
          - confirmed
    BoardGameDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        rentPrice:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
        availableQuantity:
          type: integer
          format: int32
    AccessoryDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
    UserSaveDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
        password:
          type: string
        name:
          type: string
        phone:
          type: integer
          format: int32
        email:
          type: string
        roleIds:
          type: array
          items:
            type: integer
            format: int64
    OrderListForUserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        totalPrice:
          type: integer
          format: int32
        date:
          type: string
          format: date
        status:
          type: string
          enum:
          - booked
          - rejected
          - confirmed
    RoleDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
        name:
          type: string
        phone:
          type: integer
          format: int32
        email:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleDTO'
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrderListForUserDTO'
    Accessory:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
        purchases:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Purchase'
    BoardGame:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        rentPrice:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
        rents:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Rent'
    GrantedAuthority:
      type: object
      properties:
        authority:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        totalPrice:
          type: integer
          format: int32
        date:
          type: string
          format: date
        status:
          type: string
          enum:
          - booked
          - rejected
          - confirmed
        purchases:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Purchase'
        rents:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Rent'
        user:
          $ref: '#/components/schemas/User'
    Purchase:
      type: object
      properties:
        id:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        price:
          type: integer
          format: int32
        accessory:
          $ref: '#/components/schemas/Accessory'
        order:
          $ref: '#/components/schemas/Order'
    Rent:
      type: object
      properties:
        id:
          type: integer
          format: int64
        rentFrom:
          type: string
          format: date
        rentTo:
          type: string
          format: date
        price:
          type: integer
          format: int32
        boardGame:
          $ref: '#/components/schemas/BoardGame'
        order:
          $ref: '#/components/schemas/Order'
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        users:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
        password:
          type: string
        name:
          type: string
        phone:
          type: integer
          format: int32
        email:
          type: string
        orders:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Order'
        roles:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Role'
    UserAuthenticationDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
        roles:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Role'
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/GrantedAuthority'
        accountNonLocked:
          type: boolean
        accountNonExpired:
          type: boolean
        credentialsNonExpired:
          type: boolean
        enabled:
          type: boolean
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    PageUserBaseDTO:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserBaseDTO'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/Sort'
    Sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: boolean
    UserBaseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
        name:
          type: string
        phone:
          type: integer
          format: int32
        email:
          type: string
    OrderListDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        totalPrice:
          type: integer
          format: int32
        date:
          type: string
          format: date
        status:
          type: string
          enum:
          - booked
          - rejected
          - confirmed
        user:
          $ref: '#/components/schemas/UserBaseDTO'
    OrderDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        totalPrice:
          type: integer
          format: int32
        date:
          type: string
          format: date
        status:
          type: string
          enum:
          - booked
          - rejected
          - confirmed
        user:
          $ref: '#/components/schemas/UserBaseDTO'
        purchases:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseDTO'
        rents:
          type: array
          items:
            $ref: '#/components/schemas/RentDTO'
